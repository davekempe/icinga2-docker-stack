#!/bin/bash

HOST=$1
FUNCTION=$2
# plugin to check the various isilon health parameters

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

exitCode=$STATE_UNKNOWN

usage () {
	echo "This plugin is for checking the health of the isilon nodes over ssh.
	First argument is the node, second is the function from one of these:
	check_cluster_health
	check_inodes_level
	check_devices
	check_uptime
	EG: /usr/local/bin/check_isilon 10.23.241.100 check_devices"
}

check_version () {
	timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST isi version |cut -f2 -d'v'|cut -f1 -d '.'
}

check_ssh () {
	timeout 15 ssh -q -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST exit
	echo $?
}

check_cluster_health () {
	timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST isi status |grep "Cluster Health:" |grep -q OK
	CLUSTERHEALTH=$?
	if [ "$CLUSTERHEALTH" == "0" ]; then
			MESSAGE+="$HOST reports Cluster Health is OK"
			exitCode=$STATE_OK
		else 
			MESSAGE+="$HOST reports Cluster Health is NOT OK!"
			exitCode=$STATE_CRITICAL
	fi
}

check_inodes_level () {
	timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST df -i |grep -v ^devfs|grep -v uzip|grep -v ^Filesystem> /tmp/df-i

	NUMFILESYSTEMS=`cat /tmp/df-i |wc -l`
	LINE=1
	until [ $LINE -eq $NUMFILESYSTEMS ]; do 
		INODEPERCENT=`cat /tmp/df-i|head -$LINE|tail -1|awk '{print $8}'`
		FILESYSTEM=`cat /tmp/df-i|head -$LINE|tail -1|awk '{print $1}'`
		INODENUM=`echo $INODEPERCENT|tr -d %`

		if [ $INODENUM -gt 90 ]; then
			MESSAGE+="CRITICAL: Inode percentage of $INODEPERCENT on $FILESYSTEM"
			exitCode=$STATE_CRITICAL
		else 
			MESSAGE+="OK: Inode usage levels look OK of $INODEPERCENT on $FILESYSTEM"
			exitCode=$STATE_OK
		fi

		LINE=$[$LINE+1]
	done

}

check_devices () {
#sh root@$HOST isi devices 
	version=`check_version`
	numeric='^[0-9]+$'
	# TODO: IF version isn't a number then bad
	if [[ $version =~ $numeric ]]; then
		if [ "$version" == "7" ]; then
			UNHEALTHYDEVICES=`timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST isi devices|grep -v HEALTHY|grep -v OK|wc -l`
			NUMDEVICES=`timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST isi devices|grep -v OK|wc -l`
			
			if [ $UNHEALTHYDEVICES -gt 0 ]; then
				MESSAGE+="Some devices are unhealthy"
				exitCode=$STATE_CRITICAL
			else 
				MESSAGE+="All $NUMDEVICES devices are healthy"
				exitCode=$STATE_OK
			fi
		else
				UNHEALTHYDEVICES=`timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST isi devices drive list|grep Bay|grep -v L3|grep -v HEALTHY|grep -v OK|wc -l`
				NUMDEVICES=`timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST isi devices drive list|grep Bay|grep -v L3|grep -v OK|wc -l`

			if [ $UNHEALTHYDEVICES -gt 0 ]; then
				MESSAGE+="Some devices are unhealthy"
				exitCode=$STATE_CRITICAL
			else 
				MESSAGE+="All $NUMDEVICES devices are healthy"
				exitCode=$STATE_OK
			fi
		fi
	else
		MESSAGE+="Unable to get version number"
		exitCode=$STATE_CRITICAL
	fi
}

check_closed_connections () {
	CONNCOUNT=`timeout 15 ssh -oHostKeyAlgorithms=+ssh-dss -o StrictHostKeyChecking=False root@$HOST netstat -an | grep 2049 | grep CLOSE | wc -l`
	if [ $CONNCOUNT -ge 80 ]; then 
		MESSAGE+="NFS Closed Connections ($CONNCOUNT) are more than 90 - you might need to restart the NFS process"
        exitCode=$STATE_CRITICAL
	else
		MESSAGE+="Closed NFS connections are less than 90 ($CONNCOUNT)"
		exitCode=$STATE_OK
	fi
}

if [ -n "$1" ] && [ -n "$2" ]; then
	if [[ $(check_ssh) == 0 ]]; then
		case $FUNCTION in
			check_cluster_health)
			check_cluster_health
			;;
			check_inodes_level)
			check_inodes_level
			;;
			check_devices)
			check_devices
			;;
			check_closed_connections)
			check_closed_connections
			;;
			*)
			usage
			;;
		esac
	else
		MESSAGE+="SSH to $HOST failed"
		exitCode=$STATE_CRITICAL
	fi

else
	MESSAGE+="Missing paramater"
	usage
	exitCode=$STATE_UNKNOWN
fi

if [ $exitCode -eq $STATE_UNKNOWN ]; then
    echo "UNKNOWN - $MESSAGE"
elif [ $exitCode -eq $STATE_CRITICAL ]; then
    echo "CRITICAL - $MESSAGE"
elif [ $exitCode -eq $STATE_WARNING ]; then
    echo "WARNING - $MESSAGE"
elif [ $exitCode -eq $STATE_OK ]; then
    echo "OK - $MESSAGE"
fi

exit $exitCode
